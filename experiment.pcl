# PCL program
int collums = 6;
int current_triger_type = 0;
string sond_id_filename = "audio_list_stym.txt"; #"ids.txt";
string pic_id_filename = "total_visual_stym.txt";
string sequence_filename = "sequence_3_trial.txt";
string question_filename = "question.txt";
array<int> ids[0]; # sounds id
array<int> ids_pic[0]; # pictures id
array<int> types_pic[0]; # pictures id
array<int> types_sound_1[0]; # sound id_1
array<int> types_sound_2[0]; # sound id_2
array<string> sounds[0]; # sound file name
array<string> pics[0]; # pictures file name
array<string> questions[0]; # questions file name
array<int> sequence[0][0]; # sequence of sound by there ids
array<string> questions_text[0];
# for output file
string tab = "    ";
string new_string = "\n";
string info; # Accumulate information about trials
# end

input_file f = new input_file; # input file

# sub
sub
int findID(int id, array<int,1> arr)
begin
    int k = 1; # if id>4000 then id=id-2000; end;
    term.print_line("k=" + string(id));
    loop until k >= arr.count() || id == arr[k] begin k = k + 1; end;
    return k;
end;
# end sub

# reading the instruction file
f.open( "instruction.txt" );
string instructions = "";
loop until
    f.end_of_file()
begin
    instructions = instructions + f.get_string() + " ";
end;
f.close();
# showing the instruction

instruction1.set_caption(instructions);
instruction1.set_max_text_width(1000);
instruction1.redraw();
instruction_trial.present();

# read sound data file
f.open(sond_id_filename);
f.set_delimiter('\t');
int count = 1;
loop until
    f.end_of_file() # || count >3
begin
    ids.add(f.get_int());
    sounds.add(f.get_string());
    types_sound_1.add(f.get_int());
    types_sound_2.add(f.get_int());
    count = count + 1;
end;
f.close();

# end reading sond data

# read picture data file
f.open(pic_id_filename);
f.set_delimiter('\t');
count = 1;
loop until
    f.end_of_file() # || count >3
begin
    ids_pic.add(f.get_int());
    pics.add(f.get_string());
    types_pic.add(f.get_int());
    count = count + 1;
end;
f.close();

# end reading picture data

# read sequence data file
array<int> temp_int[collums];
int col = 1;
f.open(sequence_filename);
f.set_delimiter('\t');
count = 1;
loop until
    f.end_of_file()
begin
    if col < collums then
        temp_int[col] = f.get_int();
        col = col + 1;
    elseif col == collums then
        questions_text.add(f.get_string().replace("_", " "));
        col = col + 1;
    end;
    if col > collums then
        sequence.add(temp_int);
        col = 1;
        col = 1;
        count = count + 1;
    end;
end;
f.close();
# term.print_line(sequence);

# presenting stimulus
loop
int i = 1;
until i > sequence.count()
begin
    term.print_line("start");
    term.print_line(sequence[i]);
    # cross
    cross_trial.present();

    term.print_line("presenting text");
    term.print_line(questions_text[i]);
    text1.load();
    text1.set_caption(questions_text[i]);
    text1.redraw();
    wfile1.set_filename(sounds[findID(sequence[i][1], ids)]);
    wfile1.load();
    wfile2.set_filename(sounds[findID(sequence[i][2], ids)]);
    wfile2.load();
    wfile3.set_filename(sounds[findID(sequence[i][3], ids)]);
    wfile3.load();
    sound_trial.present();

    port_code_event_2.set_port_code(types_sound_2[findID(sequence[i][2], ids)]);
    port_code_trial.present();
    string tempstr = sounds[findID(sequence[i][2], ids)];
    int i1 = tempstr.find("_");
    int i2 = tempstr.find(".wav");
    string wname = "G:\\Sound\\temp\\" + tempstr.substring(i1 + 1, i2 - i1 - 1) + ".wav";
    term.print_line("soun2 trigger:" + tempstr.substring(i1 + 1, i2 - i1 - 1) + " " + string(types_sound_1[findID(sequence[i][2], ids)]));
    current_triger_type = types_sound_1[findID(sequence[i][2], ids)];
    term.print_line(current_triger_type);
    sound_event2.set_port_code(types_sound_1[findID(sequence[i][2], ids)]);
    array<string> pic_to_show[2];
    pic_to_show[1] = pics[findID(sequence[i][4], ids_pic)];
    pic_to_show[2] = pics[findID(sequence[i][5], ids_pic)];
    pic_to_show.shuffle();
    bitmap_file.set_filename(pic_to_show[1]);
    bitmap_file.load();
    bitmap_file2.set_filename(pic_to_show[2]); # pics[findID(sequence[i][5], ids_pic)]);
    bitmap_file2.load();
    text2.load();
    text2.set_caption(questions_text[i]);
    text2.redraw();
    picture_trial.present();
    question_trial.present();
    stimulus_data last = stimulus_manager.last_stimulus_data();
    int reaction_time = last.reaction_time();
    term.print_line("RT: " + string(reaction_time));
    term.print_line(string(sequence[i][1]) + tab + string(sequence[i][2]) + tab + string(sequence[i][3]) + tab + string(sequence[i][4]) + tab + string(sequence[i][5]) + tab + "RT:" + string(reaction_time) + tab + "button:" + string(last.button()) + new_string);
    info.append(string(sequence[i][1]) + tab + string(sequence[i][2]) + tab + string(sequence[i][3]) + tab + string(sequence[i][4]) + tab + string(sequence[i][5]) + tab + "RT:" + string(reaction_time) + tab + "button:" + string(last.button()) + new_string);

i = i + 1;
end;

string filename = logfile.subject() + "_additional" + ".log";
output_file file = new output_file;
file.open(filename, true);
string information = "NAME: " + tab + logfile.subject() + "\n";
information.append(info);
file.print(information);
file.close();

